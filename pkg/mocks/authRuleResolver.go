// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/kubernetes/pkg/registry/rbac/validation (interfaces: AuthorizationRuleResolver)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package resolvers -destination ./mockAuthRuleResolver_test.go k8s.io/kubernetes/pkg/registry/rbac/validation AuthorizationRuleResolver
//

// Package resolvers is a generated GoMock package.
package mocks

import (
	context "context"
	fmt "fmt"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/rbac/v1"
	user "k8s.io/apiserver/pkg/authentication/user"
)

// MockAuthorizationRuleResolver is a mock of AuthorizationRuleResolver interface.
type MockAuthorizationRuleResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationRuleResolverMockRecorder
	isgomock struct{}
}

// MockAuthorizationRuleResolverMockRecorder is the mock recorder for MockAuthorizationRuleResolver.
type MockAuthorizationRuleResolverMockRecorder struct {
	mock *MockAuthorizationRuleResolver
}

// NewMockAuthorizationRuleResolver creates a new mock instance.
func NewMockAuthorizationRuleResolver(ctrl *gomock.Controller) *MockAuthorizationRuleResolver {
	mock := &MockAuthorizationRuleResolver{ctrl: ctrl}
	mock.recorder = &MockAuthorizationRuleResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationRuleResolver) EXPECT() *MockAuthorizationRuleResolverMockRecorder {
	return m.recorder
}

// GetRoleReferenceRules mocks base method.
func (m *MockAuthorizationRuleResolver) GetRoleReferenceRules(ctx context.Context, roleRef v1.RoleRef, namespace string) ([]v1.PolicyRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleReferenceRules", ctx, roleRef, namespace)
	ret0, _ := ret[0].([]v1.PolicyRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleReferenceRules indicates an expected call of GetRoleReferenceRules.
func (mr *MockAuthorizationRuleResolverMockRecorder) GetRoleReferenceRules(ctx, roleRef, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleReferenceRules", reflect.TypeOf((*MockAuthorizationRuleResolver)(nil).GetRoleReferenceRules), ctx, roleRef, namespace)
}

// RulesFor mocks base method.
func (m *MockAuthorizationRuleResolver) RulesFor(ctx context.Context, user user.Info, namespace string) ([]v1.PolicyRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RulesFor", ctx, user, namespace)
	ret0, _ := ret[0].([]v1.PolicyRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RulesFor indicates an expected call of RulesFor.
func (mr *MockAuthorizationRuleResolverMockRecorder) RulesFor(ctx, user, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RulesFor", reflect.TypeOf((*MockAuthorizationRuleResolver)(nil).RulesFor), ctx, user, namespace)
}

// VisitRulesFor mocks base method.
func (m *MockAuthorizationRuleResolver) VisitRulesFor(ctx context.Context, user user.Info, namespace string, visitor func(fmt.Stringer, *v1.PolicyRule, error) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VisitRulesFor", ctx, user, namespace, visitor)
}

// VisitRulesFor indicates an expected call of VisitRulesFor.
func (mr *MockAuthorizationRuleResolverMockRecorder) VisitRulesFor(ctx, user, namespace, visitor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitRulesFor", reflect.TypeOf((*MockAuthorizationRuleResolver)(nil).VisitRulesFor), ctx, user, namespace, visitor)
}
